version: '3'

vars:
  PRJ_NAME: myprj

tasks:

  # Build images
  # ========================

  build_dev:
    desc: Build docker dev image
    env:
      DOCKER_BUILDKIT: '1'
    cmds:
    - >
      docker build
      --progress=plain
      -f docker/Dockerfile.build
      -t {{.PRJ_NAME}}-dev:latest
      .

  build_prod:
    desc: Build docker prod image
    env:
      DOCKER_BUILDKIT: '1'
    #deps:
    #  - build_dev
    cmds:
    - >
      docker build
      -f docker/Dockerfile.prod
      -t {{.PRJ_NAME}}:latest
      .


  # Devel image
  # ========================

  run_dev_shell:
    desc: Build docker dev image
    deps:
      - build_dev
    cmds:
    - cmd: >
        docker run --rm
        -e SSH_AUTH_SOCK=/ssh-agent
        -v ${SSH_AUTH_SOCK:-/dev/null}:/ssh-agent
        -ti {{.PRJ_NAME}}-dev:latest bash {{.CLI_ARGS}}
      ignore_error: true

  run_dev_tests:
    desc: Run app tests
    deps:
      - build_dev
    cmds:
    - cmd: docker run --rm -ti {{.PRJ_NAME}}-dev:latest task dev:test
      ignore_error: true

  run_dev_build:
    desc: Build app packages
    deps:
      - build_dev
    cmds:
    - cmd: docker run --rm -ti {{.PRJ_NAME}}-dev:latest task build
      ignore_error: true


  # Production image
  # ========================


  run_prod:
    desc: Build docker dev image
    deps:
      - build_prod
    cmds:
    - cmd: docker run --rm -ti {{.PRJ_NAME}}:latest {{.CLI_ARGS}}
      ignore_error: true



#  # Docker Workflow
#  # ---------------
#  docker_build_prepare:
#    desc: Generate requirements.txt
#    cmds:
#      - >
#        poetry export --without-hashes
#        --format=requirements.txt --output=dist/requirements.txt
#    status:
#      - test -f dist/requirements.txt
#
#  docker_build_prepare_doc:
#    desc: Generate requirements.txt for docs
#    cmds:
#      - >
#        poetry export
#        --without-hashes
#        --without main --with doc
#        --format=requirements.txt --output=dist/requirements-doc.txt
#    status:
#      - test -f dist/requirements-doc.txt
#
#
#  docker_build_image_doc:
#    desc: Build docker image
#    deps:
#      - docker_build_prepare_doc
#      - docker_build_image
#    cmds:
#    - >
#      docker build
#      -f docker/Dockerfile.doc
#      -t {{.SRC_DIR}}-doc:{{.DOCKER_VERSION}}
#      -t {{.SRC_DIR}}-doc:latest
#      .
#
#  docker_build_image:
#    desc: Build docker image
#    deps:
#      - pkg_build
#      - docker_build_prepare
#    cmds:
#    - >
#      docker build
#      -f docker/Dockerfile.build
#      -t {{.SRC_DIR}}:{{.DOCKER_VERSION}}
#      -t {{.SRC_DIR}}:latest
#      --build-arg PAASIFY_VERSION={{.PKG_VERSION}}
#      .
#
#  docker_run:
#    desc: Run {{.SRC_DIR}} binary
#    deps:
#      - docker_build_image
#    cmds:
#      - docker run -ti --rm {{.SRC_DIR}}:{{.DOCKER_VERSION}} {{.SRC_DIR}} {{.CLI_ARGS}}
#
#  docker_clean:
#    desc: Clean generated images
#    cmds:
#      - docker images {{.SRC_DIR}} -q | xargs -n 1 docker image rm
#    status:
#      - test -z "$(docker images {{.SRC_DIR}} -q)"
