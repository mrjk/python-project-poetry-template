name: Install Paasify

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Version of python to use'
        required: true
        type: string
        default: "3.9"

      poetry_version:
        description: 'Version of Poetry to use'
        required: true
        type: string
        default: "1.2.1"

    secrets:
      access_token:
        description: 'Github Secret Token to check out the repo'


env:
  LOCAL_BIN: ~/.local/bin
  VIRTUAL_ENV: ~/.local/venv

jobs:

  install:
    runs-on: ubuntu-latest
    steps:

      # Install build env
      # ---------------------
      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: ${{inputs.python_version}}

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.12.1

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.2
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/my-custom-path
          installer-parallel: true



      - name: Load cached python environment
        id: cached-env-install
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: python_env--${{ runner.os }}--${{inputs.python_version}}--${{inputs.poetry_version}}

      #- name: Configure PATHs dfsdf
      #  run: |
      #    echo "${LOCAL_BIN}" >> $GITHUB_PATH
      #    echo "${VIRTUAL_ENV}/bin" >> $GITHUB_PATH

      - name: Install virtualenv and poetry (cached)
        #if: steps.cached-env-install.outputs.cache-hit != 'true'
        run: |
          poetry config --list
          #task -v dev:bootstrap

          #python -m pip install --upgrade pip virtualenv
          #virtualenv ~/.venv

          #source ~/.venv/bin/activate
          #pip install --upgrade poetry==${{inputs.poetry_version}}
          #poetry config virtualenvs.path ~/.venv
          #poetry config virtualenvs.in-project false
          #poetry config virtualenvs.create false

          #GITHUB_RELEASE_URL="https://github.com/go-task/task/releases/download"
          #TASK_VERSION=v3.18.0
          #TASK_ARCH=amd64
          #TASK_URL="${GITHUB_RELEASE_URL}/$TASK_VERSION/task_linux_${TASK_ARCH}.tar.gz"
          #curl -L --output /tmp/go-task.tar.gz "$TASK_URL"
          #tar xzvf /tmp/go-task.tar.gz  -C .venv/bin/ task
          ##tar xzvf /tmp/go-task.tar.gz  -C .direnv/python-3.9.12/bin/ task




      # Install project dependencies
      # ---------------------
      - name: Fetch source code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: true

      - name: Load cached venv
        id: cached-project-deps
        uses: actions/cache@v3
        with:
          path: ~/.venv
          key: venv--${{ runner.os }}--${{inputs.python_version}}--${{inputs.poetry_version}}--${{ hashFiles('**/poetry.lock') }}

      - name: Install project dependencies (cached)
        if: steps.cached-project-deps.outputs.cache-hit != 'true'
        run: |
          task -v dev:bootstrap
          #source ~/.venv/bin/activate
          #poetry install -vv --no-interaction --no-root

      - name: Install project
        run: |
          task -v dev:setup
          #source ~/.venv/bin/activate
          #poetry install -vv --no-interaction --only-root
