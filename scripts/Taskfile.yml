version: '3'

vars:
  SRC_DIR: myprj
  TEST_DIR: tests/
  POETRY_VERSION: '1.2.1'
  DIRENV_VERSION: 'latest'
  TASK_VERSION: 'v3.18.0'

tasks:


  # Git Workflow
  # ---------------
  git_merge_develop_into_main:
    desc: Merge git develop branch into main
    cmds:
      - git checkout main
      - git pull origin
      - git fetch origin develop:develop
      - 'git merge --no-ff -m "chore: merge develop into main" develop'
      - git push --set-upstream origin main

  git_merge_master_into_develop:
    desc: Merge git main branch into develop
    cmds:
      - git checkout develop
      - git pull origin
      - git fetch origin main:main
      - 'git merge --no-ff -m "chore: update develop from main" main'
      - git push --set-upstream origin develop


  # Release
  # ---------------

  release_stable:
    desc: Pipeline to publish stable release
    vars:
      CURRENT_BRANCH:
        sh: git rev-parse --abbrev-ref HEAD
    cmds:
      - task: git_merge_develop_into_main
      - task release_stable
      - task: git_merge_master_into_develop

  release_beta:
    desc: Pipeline to publish beta release
    vars:
      CURRENT_BRANCH:
        sh: git rev-parse --abbrev-ref HEAD
    cmds:
      - task release_beta


  # Helpers
  # ---------------
  tag_current_version:
    desc: Tag current version
    vars:
      GIT_TAG:
        sh: poetry version -s
        #sh: git describe --tags --abbrev=0 2>/dev/null
    cmds:
      - git tag -a -m "tag {{.GIT_TAG}}" {{.GIT_TAG}}
      - git push origin

  bump_minor:
    desc: When you want to work on new features (beta)
    cmds:
      - poetry run semantic-release version --prerelease

  dev_changlog:
    desc: Show currently modified things
    cmds:
      - poetry run semantic-release changelog --noop --unreleased


  fake_fix:
    desc: Generate fake patch commits
    cmds:
      - 'git commit --allow-empty  -m "fix: simple bugfix1"'
      - 'git commit --allow-empty  -m "fix: simple bugfix2"'
      - 'git commit --allow-empty  -m "fix: simple bugfix3"'

  fake_feat:
    desc: Generate fake feature commits
    cmds:
      - 'git commit --allow-empty  -m "feat: new feature1"'
      - 'git commit --allow-empty  -m "feat: new feature2"'
      - 'git commit --allow-empty  -m "feat: new feature3"'


  # Project CI
  # ---------------

  lint_black:
    desc: Autolint codes
    run: once
    sources: &PAASIFY_MODULE
      - "{{.SRC_DIR}}/*.py"
    cmds:
      - >2
        git status --porcelain | grep '^.M {{.SRC_DIR}}/' && {
          echo "ERROR: Uncommited files !";
          exit 1;
        } || exit 0
      - black {{.SRC_DIR}}

  test:
    desc: Run tests
    run: once
    sources: &PAASIFY_CODE
      - "{{.SRC_DIR}}/*.py"
      - tests/*.py
    cmds:
      - pytest -sx {{.CLI_ARGS}}

  # Reporting tools
  # ---------------

  report_cov:
    desc: Test coverage status
    run: once
    sources: *PAASIFY_MODULE
    cmds:
      - pytest --cov={{.SRC_DIR}} tests {{.CLI_ARGS}}

  report_lint:
    desc: Report linting status
    run: once
    sources: *PAASIFY_CODE
    cmds:
      - pylint --output-format=colorized {{.SRC_DIR}}


  # External tools bootstrap
  # ---------------

  #bootstrap_task:
  #  desc: Install project dependencies
  #  cmds:
  #    - |2
  #      if ! task --version | grep -q "{{.TASK_VERSION}}"; then
  #        mkdir -p "{{.LOCAL_BIN}}"
  #        GITHUB_RELEASE_URL="https://github.com/go-task/task/releases/download"
  #        TASK_ARCH=amd64
  #        TASK_URL="${GITHUB_RELEASE_URL}/{{.TASK_VERSION}}/task_linux_${TASK_ARCH}.tar.gz"
  #        curl -L --output /tmp/go-task.tar.gz "$TASK_URL"
  #        tar xzvf /tmp/go-task.tar.gz  -C "{{.LOCAL_BIN}}" task
  #        >&2 echo "INFO: Task has been installed ({{.TASK_VERSION}})"
  #      else
  #        >&2 echo "INFO: Task is already installed ({{.TASK_VERSION}})"
  #      fi

  #bootstrap_poetry:
  #  desc: Install Poetry
  #  #sources:
  #  #  - poetry.lock
  #  #generates:
  #  #  - "$VIRTUAL_ENV/bin/python"
  #  cmds:
  #    #- python -m pip install --upgrade pip virtualenv
  #    #- '[[ -f "{{.PYTHON_BIN}}/python" ]] || virtualenv {{.VIRTUALENV}}'

  #    #- "{{.PYTHON_BIN}}/pip install --upgrade poetry=={{.POETRY_VERSION}}"
  #    #- "{{.PYTHON_BIN}}/poetry config virtualenvs.path {{.VIRTUALENV}}"
  #    #- "{{.PYTHON_BIN}}/poetry config virtualenvs.create true"
  #    #- "{{.PYTHON_BIN}}/poetry install -vv --no-interaction --no-root"
