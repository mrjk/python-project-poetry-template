{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Hello World ! This is a python project to help you to start new projects. Manual versio history: v0.13.1 Hello CLI 2! : 0.13.3 Hello CLI 2! : 0.13.3 Hello CLI 2! : 0.13.3","title":"Welcome"},{"location":"#welcome","text":"Hello World ! This is a python project to help you to start new projects. Manual versio history: v0.13.1 Hello CLI 2! : 0.13.3 Hello CLI 2! : 0.13.3 Hello CLI 2! : 0.13.3","title":"Welcome"},{"location":"api/api_doc/","text":"API Documentation This documenation is generated automagically. API DOC Project main CLI interface cli () Main cli Interface Source code in myprj/cli.py 9 10 11 def cli (): \"Main cli Interface\" print ( f \"Hello CLI 2! : { __version__ } \" ) options: show_root_heading: true show_source: true heading_level: 3 show_category_heading: true","title":"API Documentation"},{"location":"api/api_doc/#api-documentation","text":"This documenation is generated automagically.","title":"API Documentation"},{"location":"api/api_doc/#api-doc","text":"Project main CLI interface","title":"API DOC"},{"location":"api/api_doc/#myprj.cli.cli","text":"Main cli Interface Source code in myprj/cli.py 9 10 11 def cli (): \"Main cli Interface\" print ( f \"Hello CLI 2! : { __version__ } \" ) options: show_root_heading: true show_source: true heading_level: 3 show_category_heading: true","title":"cli()"},{"location":"guide/best_practices/","text":"Developpement Best Practices Software design Conventions Standard: 12 factors Keep a Changelog OpenContainer Image Spec Implementations: Angular Commit Guideline Script to rule them all Workflow Common: Generate a changelog Make a new release Build the documentation Run the unit tests Developement: Using complimentary tools Use direnv Tips: Will help to set project environment variables for development purpose Lang: Go Sources: https://github.com/direnv/direnv Documentation: https://direnv.net/ Config: `.envrc` You will need to accept a first time to execute project environment: direnv allow If you want to see what it does: $ cat .envrc layout python3 export XDG_CACHE_HOME=.venv/ Once enabled, you can run most of the project command. To disable it, just leave the directory. It will auto reenable next time you come back. Use commitizen Tips: Will help to ensure commit messages respect some sort of logic, used for realease logs Lang: Python Sources: https://github.com/commitizen-tools/commitizen Doc: https://commitizen-tools.github.io/commitizen/ Alternatives: [cz-vli](https://github.com/commitizen/cz-cli) (in JS) Config: `pyproject.toml`, `[.]cz.{toml,json,yaml}` When you finished your modifications, add your files: git add file1 file2 Instead of using git commit , just use cz : $ cz c ? Select the type of change you are committing docs: Documentation only changes ? What is the scope of this change? (class or file name): (press [enter] to skip) user_doc ? Write a short and imperative summary of the code changes: (lower case and no period) add support for html documentation ? Provide additional contextual information about the code changes: (press [enter] to skip) We uses here mkdocs to provide this service ? Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer No ? Footer. Information about Breaking Changes and reference issues that this commit closes: (press [enter] to skip) If you have issue with commit message, either use cz c or test your message before: $ cz check -m \"docs: hellow world\" Commit validation: successful! Tips about common errors: A commit must return with a new line ! cz info |& grep 'allowed\\|chore' Commitizen can either use pyproject.toml or .cz.toml as a configuration source, but the latter is recommanded. Enable pre-commit hooks Tips: Ensure commit respect quality standard, and eventually fix things Sources: https://github.com/pre-commit/pre-commit Doc: https://pre-commit.com/ Alternatives: [husky](https://github.com/typicode/husky) Pre-commit needs to hook to your LOCAL git config, it will configure the Core.HookPath variable to use it's own hooks. To enable git to git pre-commit hooks, you need to manually run: pre-commit install --install-hooks -t pre-commit -t pre-merge-commit -t pre-push -t prepare-commit-msg -t commit-msg -t post-commit -t post-checkout -t post-merge -t post-rewrite Pre-commit is configured via the .pre-commit-config.yaml file. You can tweak what you want to enable. $ head .pre-commit-config.yaml default_install_hook_types: - commit-msg - pre-commit - pre-push repos: - hooks: - id: check-added-large-files - id: trailing-whitespace - id: check-ast Then you can test your changes: pre-commit run --hook-stage commit You can skip some tests, for debug purpose only: SKIP=mdformat git push When you want to update your repos, simply run: pre-commit autoupdate Use TaskDev (Go) Tips: Advantageous alternative to Makefiles configured with yaml. Useful for complex project commands. Lang: Go Sources: https://github.com/go-task/task Docs: https://taskfile.dev/ Alternatives: Makefile To see the list of available commands: $ task -l task: Available tasks for this project: * bump: Bump code version * bump_patch_V1: Bump minor version * default: Show all commands * init: init environment Taskfile has it's own configuration: vim Taskfile.yaml To run a command: task bump -- 1.5.1 To test dry-mode: task --dry-mode init To debug: task -v init","title":"Developpement Best Practices"},{"location":"guide/best_practices/#developpement-best-practices","text":"","title":"Developpement Best Practices"},{"location":"guide/best_practices/#software-design","text":"","title":"Software design"},{"location":"guide/best_practices/#conventions","text":"Standard: 12 factors Keep a Changelog OpenContainer Image Spec Implementations: Angular Commit Guideline Script to rule them all","title":"Conventions"},{"location":"guide/best_practices/#workflow","text":"Common: Generate a changelog Make a new release Build the documentation Run the unit tests","title":"Workflow"},{"location":"guide/best_practices/#developement-using-complimentary-tools","text":"","title":"Developement: Using complimentary tools"},{"location":"guide/best_practices/#use-direnv","text":"Tips: Will help to set project environment variables for development purpose Lang: Go Sources: https://github.com/direnv/direnv Documentation: https://direnv.net/ Config: `.envrc` You will need to accept a first time to execute project environment: direnv allow If you want to see what it does: $ cat .envrc layout python3 export XDG_CACHE_HOME=.venv/ Once enabled, you can run most of the project command. To disable it, just leave the directory. It will auto reenable next time you come back.","title":"Use direnv"},{"location":"guide/best_practices/#use-commitizen","text":"Tips: Will help to ensure commit messages respect some sort of logic, used for realease logs Lang: Python Sources: https://github.com/commitizen-tools/commitizen Doc: https://commitizen-tools.github.io/commitizen/ Alternatives: [cz-vli](https://github.com/commitizen/cz-cli) (in JS) Config: `pyproject.toml`, `[.]cz.{toml,json,yaml}` When you finished your modifications, add your files: git add file1 file2 Instead of using git commit , just use cz : $ cz c ? Select the type of change you are committing docs: Documentation only changes ? What is the scope of this change? (class or file name): (press [enter] to skip) user_doc ? Write a short and imperative summary of the code changes: (lower case and no period) add support for html documentation ? Provide additional contextual information about the code changes: (press [enter] to skip) We uses here mkdocs to provide this service ? Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer No ? Footer. Information about Breaking Changes and reference issues that this commit closes: (press [enter] to skip) If you have issue with commit message, either use cz c or test your message before: $ cz check -m \"docs: hellow world\" Commit validation: successful! Tips about common errors: A commit must return with a new line ! cz info |& grep 'allowed\\|chore' Commitizen can either use pyproject.toml or .cz.toml as a configuration source, but the latter is recommanded.","title":"Use commitizen"},{"location":"guide/best_practices/#enable-pre-commit-hooks","text":"Tips: Ensure commit respect quality standard, and eventually fix things Sources: https://github.com/pre-commit/pre-commit Doc: https://pre-commit.com/ Alternatives: [husky](https://github.com/typicode/husky) Pre-commit needs to hook to your LOCAL git config, it will configure the Core.HookPath variable to use it's own hooks. To enable git to git pre-commit hooks, you need to manually run: pre-commit install --install-hooks -t pre-commit -t pre-merge-commit -t pre-push -t prepare-commit-msg -t commit-msg -t post-commit -t post-checkout -t post-merge -t post-rewrite Pre-commit is configured via the .pre-commit-config.yaml file. You can tweak what you want to enable. $ head .pre-commit-config.yaml default_install_hook_types: - commit-msg - pre-commit - pre-push repos: - hooks: - id: check-added-large-files - id: trailing-whitespace - id: check-ast Then you can test your changes: pre-commit run --hook-stage commit You can skip some tests, for debug purpose only: SKIP=mdformat git push When you want to update your repos, simply run: pre-commit autoupdate","title":"Enable pre-commit hooks"},{"location":"guide/best_practices/#use-taskdev-go","text":"Tips: Advantageous alternative to Makefiles configured with yaml. Useful for complex project commands. Lang: Go Sources: https://github.com/go-task/task Docs: https://taskfile.dev/ Alternatives: Makefile To see the list of available commands: $ task -l task: Available tasks for this project: * bump: Bump code version * bump_patch_V1: Bump minor version * default: Show all commands * init: init environment Taskfile has it's own configuration: vim Taskfile.yaml To run a command: task bump -- 1.5.1 To test dry-mode: task --dry-mode init To debug: task -v init","title":"Use TaskDev (Go)"},{"location":"guide/conventions/","text":"Project conventions General We prefer *.yml instead of *.yaml TaskDev Configuration: Taskfile.yml Should respect this principles: https://github.com/dxw/scripts-to-rule-them-all Except that each task: Must use serve instead of server You can group tasks with a topic prefix, like doc_setup , doc_setup , tests_setup ... Main entry points scripts bootstrap Doc: Resolve all dependencies that the application requires to run. Usage: pip/yarn/npm/gem install setup Doc: Set up the application for the first time after cloning, or set it back to the initial unused state. Usage: remove dist/* and rerun bootstrap update Doc: Update the application to run for its current checkout. Usage: git pull/rebase main/develop, refresh project deps test Doc: Run the test suite for the application. Optionally pass in a path to an individual test file to run a single test. Usage: pytest, pylint, black, flake serve (server) Doc: Launch the application and any extra required processes locally Usage: mkdocs serve, jupyter-notebook serve_stop (new) Doc: Stop a backgrounded started service Usage: kill mkdocs serve, kill jupyter-notebook build Doc: Should create a production build of the application Usage: console Doc: script/console should open a console for the application Usage: docker-compose logs, cmd -vvv --debug Other words: debug Doc: Usage: debug Doc: Usage: clean Doc: Remove or delete artifacts Usage: rm dists/*.whl bump Doc: Change application version Usage: poetry version major depends: tests, lint lint Doc: Lint the code Usage: black, pylint depends: release Doc: Release a new version Usage: poetry version depends: tests, lint report Doc: Show corevarge report, performance output, benchmarks Usage: pytest --cov=... depends: tests, lint publish (gh_publish, git_publish, gl_publish) Doc: Publish on repository Usage: semantic-release publish, publish build & publish depends: buid changelog Doc: Generate the current changelod Usage: semantic-release changelog Developement shortcuts: dev Doc: Put the developer on a correct branch to start to develop Usage: git checkout develop; git pull dev_bootstrap: Doc: Flush the current environment and start a fresh development Usage: pip install poetry, poetry install --no-root dev_setup: Doc: Install the software and its dev dependencies Usage: poetry install dev_release: Doc: Release a develop version Usage: dev_update: Doc: Usage: dev_update: Doc: Usage: Commit messages See Angular","title":"Project conventions"},{"location":"guide/conventions/#project-conventions","text":"","title":"Project conventions"},{"location":"guide/conventions/#general","text":"We prefer *.yml instead of *.yaml","title":"General"},{"location":"guide/conventions/#taskdev","text":"Configuration: Taskfile.yml Should respect this principles: https://github.com/dxw/scripts-to-rule-them-all Except that each task: Must use serve instead of server You can group tasks with a topic prefix, like doc_setup , doc_setup , tests_setup ... Main entry points scripts bootstrap Doc: Resolve all dependencies that the application requires to run. Usage: pip/yarn/npm/gem install setup Doc: Set up the application for the first time after cloning, or set it back to the initial unused state. Usage: remove dist/* and rerun bootstrap update Doc: Update the application to run for its current checkout. Usage: git pull/rebase main/develop, refresh project deps test Doc: Run the test suite for the application. Optionally pass in a path to an individual test file to run a single test. Usage: pytest, pylint, black, flake serve (server) Doc: Launch the application and any extra required processes locally Usage: mkdocs serve, jupyter-notebook serve_stop (new) Doc: Stop a backgrounded started service Usage: kill mkdocs serve, kill jupyter-notebook build Doc: Should create a production build of the application Usage: console Doc: script/console should open a console for the application Usage: docker-compose logs, cmd -vvv --debug Other words: debug Doc: Usage: debug Doc: Usage: clean Doc: Remove or delete artifacts Usage: rm dists/*.whl bump Doc: Change application version Usage: poetry version major depends: tests, lint lint Doc: Lint the code Usage: black, pylint depends: release Doc: Release a new version Usage: poetry version depends: tests, lint report Doc: Show corevarge report, performance output, benchmarks Usage: pytest --cov=... depends: tests, lint publish (gh_publish, git_publish, gl_publish) Doc: Publish on repository Usage: semantic-release publish, publish build & publish depends: buid changelog Doc: Generate the current changelod Usage: semantic-release changelog Developement shortcuts: dev Doc: Put the developer on a correct branch to start to develop Usage: git checkout develop; git pull dev_bootstrap: Doc: Flush the current environment and start a fresh development Usage: pip install poetry, poetry install --no-root dev_setup: Doc: Install the software and its dev dependencies Usage: poetry install dev_release: Doc: Release a develop version Usage: dev_update: Doc: Usage: dev_update: Doc: Usage:","title":"TaskDev"},{"location":"guide/conventions/#commit-messages","text":"See Angular","title":"Commit messages"},{"location":"guide/tooling/","text":"Tooling This project uses various tools to make it live. System dependencies: git taskdev Project dependencies: poetry: Is is used as main tool to develop the projec. Its role consists in installing, building and releasing python packages python-semantic-release: It is used as version bumper Can also be used to upload Alternatives: poetry-bumpversion commitizen mkdocs: It is used to generate project documentation via markdown files Optional developper deps: pre-commit: Used to validate commits respect some standards commitizen (optional) Used to create compliant git messages Documentation Interesting plugins: mkdocs-version-annotations mkdocs-latest-release-plugin *","title":"Tooling"},{"location":"guide/tooling/#tooling","text":"This project uses various tools to make it live. System dependencies: git taskdev Project dependencies: poetry: Is is used as main tool to develop the projec. Its role consists in installing, building and releasing python packages python-semantic-release: It is used as version bumper Can also be used to upload Alternatives: poetry-bumpversion commitizen mkdocs: It is used to generate project documentation via markdown files Optional developper deps: pre-commit: Used to validate commits respect some standards commitizen (optional) Used to create compliant git messages","title":"Tooling"},{"location":"guide/tooling/#documentation","text":"Interesting plugins: mkdocs-version-annotations mkdocs-latest-release-plugin *","title":"Documentation"}]}