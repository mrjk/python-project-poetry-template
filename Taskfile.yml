version: '3'

# See guidelines: https://github.com/dxw/scripts-to-rule-them-all

vars:
  SRC_DIR: myprj
  TEST_DIR: tests/

#  RELEASE:
#    sh: ./build_target.sh release
#  GIT_VERSION:
#    sh: ./build_target.sh git
#  DOCKER_VERSION:
#    sh: ./build_target.sh docker
#  PKG_VERSION:
#    sh: ./build_target.sh pkg
#    #sh: python -m {{.SRC_DIR}}.version
#

  # GIT_TAG:
  #   sh: git describe --tags 2>/dev/null || echo devel
  # GIT_BRANCH:
  #   sh: git rev-parse --abbrev-ref HEAD
  # PAASIFY_VERSION:
  #   sh: poetry version -s

  # #PAASIFY_RELEASE=$(poetry version -s)
  # PAASIFY_RELEASE: latest

includes:
  #doc:
  #  taskfile: ./docs/Taskfile.yml
  #  dir: ./docs

  dev:
    taskfile: ./scripts/Taskfile.yml
    #dir: .
  docker:
    taskfile: ./docker/Taskfile.yml

# See: https://github.blog/2015-06-30-scripts-to-rule-them-all/


tasks:

  # Generic helpers
  # -----------------

  default:
    desc: Show all commands
    cmds:
      - task --list-all

  #bootstrap:
  #  desc: Bootstrap all
  #  cmds:
  #    - for c in $(task -l | grep -Eo '[^ ]+_bootstrap'); do task $c ; done


  # Project helpers
  # -----------------

  bootstrap:
    desc: Bootstrap environment
    sources:
      - poetry.lock
    cmds:
      - poetry config --list
      - poetry install -vv --no-interaction --no-root

  setup:
    desc: Setup project
    cmds:
      - poetry install -vv --no-interaction --only-root

  bump_minor:
    desc: when you want to work on new features
    cmds:
      - semantic-release -D tag_commit=false version --prerelease

  dev_changlog:
    desc: Show currently modified things
    cmds:
      - semantic-release changelog --noop --unreleased

  fake_fix:
    desc: Generate fake patch commits
    cmds:
      - 'git c --allow-empty  -m "fix: simple bug"'
      - 'git c --allow-empty  -m "fix: simple bug"'
      - 'git c --allow-empty  -m "fix: simple bug"'

  fake_feat:
    desc: Generate fake feature commits
    cmds:
      - 'git c --allow-empty  -m "feat: new feat"'
      - 'git c --allow-empty  -m "feat: new feat"'
      - 'git c --allow-empty  -m "feat: new feat"'

  release_prod:
    desc: Bump code stable version, generate changelog, create a tag
    deps:
      - build
    cmds:
      - git checkout main
      - 'git merge --no-ff -m "chore: merge develop into main" develop'
      - semantic-release -D tag_commit=true -D remove_dist=False publish
      - git checkout develop
      - 'git merge --no-ff -m "chore: update develop from main" main'
      - git push origin || true

  # Should go in DEV
  release_beta:
    desc: Bump code stable version, generate changelog, create a tag
    deps:
      - build
    cmds:
      - git checkout develop
      - semantic-release -D tag_commit=true -D branch=develop publish  -v DEBUG --prerelease
      - git push origin || true

      # V1 WORKING
      #- ./scripts/release.sh {{.CLI_ARGS}}


#      - echo -e "# What's new ?\n\n## List of changes\n" > dist/RELEASE.md
#      - semantic-release changelog --unreleased >> dist/RELEASE.md
#      - semantic-release publish -D remove_dist=False

      #- bash scripts/release.sh {{.CLI_ARGS}}
      # GH
      #   - create release
      #   - upload file
      # Pypi
      #   - upload file
      # Docker
      #   - upload docker image

  build:
    desc: Create a python package
    deps:
      - clean
    cmds:
      - poetry build
      - semantic-release changelog --unreleased > dist/RELEASE.md
      - semantic-release changelog --released > dist/RELEASE_new.md

  #publish:
  #  desc: Create a python package
  #  interactive: true
  #  deps:
  #    - pkg_build
  #  cmds:
  #    - poetry publish

  update:
    desc: Synchronize git
    cmds:
      - git fetch -a && git pull

  clean:
    desc: Clean generated packages
    cmds:
      - rm -rf dist/ && mkdir -p dist
    status:
      - test ! -d dist/



#
#  # Project Workflow
#  # ---------------
#  run_qa:
#    desc: Run short test suites
#    deps:
#    - run_black
#    - report_linting
#
#  run_test:
#    desc: Run full test suites
#    deps:
#    - run_black
#    - run_test
#    - report_coverage
#    - report_linting
#
#
#
#  # Top level Workflow
#  # ---------------
#
#  # serve_doc:
#  #   desc: Serve locally documentation site
#  #   deps:
#  #     - doc:serve_doc
#
#  clean:
#    desc: Clean all artifacts
#    deps:
#      - pkg_clean
#      - docker_clean
#
